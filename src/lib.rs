use num_bigint::{BigUint, RandBigInt};
use num_traits::One;
use rand::Rng;

// Constants:   https://datatracker.ietf.org/doc/rfc3526/?include_text=1
// Explanation: https://crypto.stackexchange.com/questions/22716/generation-of-a-cyclic-group-of-prime-order

pub const G: &[u8] = &[0x02];

pub const H: &[u8] = &[
    0x78, 0xbc, 0x49, 0xa1, 0x2f, 0x72, 0xaf, 0x05, 0xc6, 0x75, 0x04, 0xd4, 0xc0, 0xc2, 0x2e, 0x26,
    0x46, 0xf4, 0x9f, 0x35, 0x26, 0x68, 0xae, 0x19, 0x8d, 0x3d, 0x91, 0x69, 0x50, 0x40, 0x0b, 0x95,
    0xf6, 0xad, 0x86, 0x56, 0xf1, 0x96, 0x4e, 0xee, 0x5e, 0x3f, 0x7c, 0xc6, 0xf0, 0xfb, 0x7a, 0x78,
    0x5d, 0x14, 0xa7, 0x2c, 0x9b, 0x2c, 0x40, 0xdc, 0xd8, 0x3d, 0x42, 0x49, 0x5b, 0x0b, 0xcd, 0x92,
    0x7a, 0xcb, 0xe0, 0xbc, 0x08, 0xe3, 0xe2, 0x88, 0xec, 0xdd, 0x16, 0x84, 0x05, 0x23, 0xdb, 0xc4,
    0x91, 0x86, 0xd2, 0x4c, 0x05, 0xad, 0xee, 0x55, 0x11, 0xf4, 0xfd, 0x48, 0x23, 0xb4, 0x51, 0x62,
    0x2b, 0x4f, 0x6a, 0xe0, 0xd6, 0xf5, 0x65, 0x34, 0x7b, 0xeb, 0x2e, 0x03, 0xf9, 0x4b, 0x8d, 0x7f,
    0x2c, 0x09, 0x05, 0xae, 0x53, 0x98, 0xea, 0xb9, 0xb0, 0x11, 0x11, 0x9b, 0x0a, 0x1a, 0xe8, 0xaa,
    0x2c, 0x38, 0xa3, 0x6d, 0x8d, 0x61, 0x88, 0xcb, 0x2b, 0x71, 0xd3, 0xc1, 0xf6, 0x0a, 0xb8, 0xc8,
    0xd7, 0xbe, 0xe6, 0x83, 0x7c, 0xe9, 0x98, 0x45, 0x84, 0x7c, 0xfb, 0x29, 0x9b, 0x98, 0x02, 0x68,
    0x91, 0x9f, 0x67, 0xd2, 0xca, 0xe5, 0x60, 0xcd, 0x69, 0x95, 0xa1, 0xf3, 0xf5, 0xdd, 0xc1, 0x84,
    0xdf, 0xf2, 0xdc, 0x99, 0x3b, 0x0b, 0x7b, 0x2d, 0x78, 0xec, 0xd0, 0x66, 0xd2, 0x10, 0xec, 0xea,
];

pub const P: &[u8] = &[
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
    0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
    0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
    0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
    0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
    0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
    0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
    0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05,
    0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
    0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
    0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04,
    0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x23, 0x73, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];

pub const Q: &[u8] = &[
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x87, 0xed, 0x51, 0x10, 0xb4, 0x61, 0x1a,
    0x62, 0x63, 0x31, 0x45, 0xc0, 0x6e, 0x0e, 0x68, 0x94, 0x81, 0x27, 0x04, 0x45, 0x33, 0xe6, 0x3a,
    0x01, 0x05, 0xdf, 0x53, 0x1d, 0x89, 0xcd, 0x91, 0x28, 0xa5, 0x04, 0x3c, 0xc7, 0x1a, 0x02, 0x6e,
    0xf7, 0xca, 0x8c, 0xd9, 0xe6, 0x9d, 0x21, 0x8d, 0x98, 0x15, 0x85, 0x36, 0xf9, 0x2f, 0x8a, 0x1b,
    0xa7, 0xf0, 0x9a, 0xb6, 0xb6, 0xa8, 0xe1, 0x22, 0xf2, 0x42, 0xda, 0xbb, 0x31, 0x2f, 0x3f, 0x63,
    0x7a, 0x26, 0x21, 0x74, 0xd3, 0x1b, 0xf6, 0xb5, 0x85, 0xff, 0xae, 0x5b, 0x7a, 0x03, 0x5b, 0xf6,
    0xf7, 0x1c, 0x35, 0xfd, 0xad, 0x44, 0xcf, 0xd2, 0xd7, 0x4f, 0x92, 0x08, 0xbe, 0x25, 0x8f, 0xf3,
    0x24, 0x94, 0x33, 0x28, 0xf6, 0x72, 0x2d, 0x9e, 0xe1, 0x00, 0x3e, 0x5c, 0x50, 0xb1, 0xdf, 0x82,
    0xcc, 0x6d, 0x24, 0x1b, 0x0e, 0x2a, 0xe9, 0xcd, 0x34, 0x8b, 0x1f, 0xd4, 0x7e, 0x92, 0x67, 0xaf,
    0xc1, 0xb2, 0xae, 0x91, 0xee, 0x51, 0xd6, 0xcb, 0x0e, 0x31, 0x79, 0xab, 0x10, 0x42, 0xa9, 0x5d,
    0xcf, 0x6a, 0x94, 0x83, 0xb8, 0x4b, 0x4b, 0x36, 0xb3, 0x86, 0x1a, 0xa7, 0x25, 0x5e, 0x4c, 0x02,
    0x78, 0xba, 0x36, 0x04, 0x65, 0x11, 0xb9, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
];

pub fn exponentiate(num: &BigUint, exp: &BigUint, p: &BigUint) -> BigUint {
    num.modpow(exp, p)
}

pub fn solve(x: &BigUint, k: &BigUint, c: &BigUint, q: &BigUint) -> BigUint {
    // s = (k - c * x) mod q
    if k >= &(c * x) {
        (k - c * x).modpow(&BigUint::one(), q)
    } else {
        q - (c * x - k).modpow(&BigUint::one(), q)
    }
}

pub fn verify(
    g: &BigUint,
    h: &BigUint,
    p: &BigUint,
    y1: &BigUint,
    y2: &BigUint,
    r1: &BigUint,
    r2: &BigUint,
    c: &BigUint,
    s: &BigUint,
) -> bool {
    // R1 = g ^ s * Y1 ^ c
    let eq1 = *r1 == (exponentiate(g, s, p) * exponentiate(y1, c, p)).modpow(&BigUint::one(), p);
    // R2 = h ^ s * Y2 ^ c
    let eq2 = *r2 == (exponentiate(h, s, p) * exponentiate(y2, c, p)).modpow(&BigUint::one(), p);

    eq1 && eq2
}

pub fn random_number() -> BigUint {
    let mut rng = rand::thread_rng();

    rng.gen_biguint(256)
}

pub fn random_string(n: usize) -> String {
    rand::thread_rng()
        .sample_iter(rand::distributions::Alphanumeric)
        .take(n)
        .map(char::from)
        .collect()
}

pub fn serialize(n: &BigUint) -> Vec<u8> {
    n.to_bytes_be()
}

pub fn deserialize(n: &[u8]) -> BigUint {
    BigUint::from_bytes_be(n)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exponentiate() {
        assert_eq!(
            exponentiate(
                &BigUint::from(1u32),
                &BigUint::from(2u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(1u32)
        );
        assert_eq!(
            exponentiate(
                &BigUint::from(2u32),
                &BigUint::from(3u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(8u32)
        );
        assert_eq!(
            exponentiate(
                &BigUint::from(2u32),
                &BigUint::from(4u32),
                &BigUint::from(11u32)
            ),
            BigUint::from(5u32)
        );
    }

    #[test]
    fn test_solve() {
        // (10 - 2 * 1) mod 101 = 8
        assert_eq!(
            solve(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(1u32),
                &BigUint::from(101u32)
            ),
            BigUint::from(8u32)
        );
        // (10 - 2 * 6) mod 101 = 99
        assert_eq!(
            solve(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(6u32),
                &BigUint::from(101u32)
            ),
            BigUint::from(99u32)
        );
    }

    #[test]
    fn test_verify() {
        //p=23 q=11 g=4 h=9 x=6 k=7 c=4 Y1=2, Y2=3, R1=8, R2=4, s=5
        let g = &BigUint::from(4u32);
        let h = &BigUint::from(9u32);
        let q = &BigUint::from(11u32);
        let p = &BigUint::from(23u32);
        let y1 = &BigUint::from(2u32);
        let y2 = &BigUint::from(3u32);
        let r1 = &BigUint::from(8u32);
        let r2 = &BigUint::from(4u32);
        let c = &BigUint::from(4u32);
        let s = &BigUint::from(5u32);
        assert!(verify(g, h, p, y1, y2, r1, r2, c, s));
        assert!(!verify(
            g,
            h,
            p,
            y1,
            y2,
            r1,
            r2,
            c,
            &(s + BigUint::one()).modpow(&BigUint::one(), q)
        ));
    }

    #[test]
    fn test_toy_example() {
        //p=23 q=11 g=4 h=9 x=6 k=7 c=4 Y1=2, Y2=3, R1=8, R2=4, s=5
        let g = &BigUint::from(4u32);
        let h = &BigUint::from(9u32);
        let q = &BigUint::from(11u32);
        let p = &BigUint::from(23u32);

        let x = &BigUint::from(6u32); // secret

        // registration
        let y1 = exponentiate(g, x, p);
        let y2 = exponentiate(h, x, p);

        // verification (a)
        let k = random_number();
        let r1 = exponentiate(g, &k, p);
        let r2 = exponentiate(h, &k, p);

        // verification (b)
        let c = random_number();

        // verification (c)
        let s = solve(x, &k, &c, q);
        assert!(verify(g, h, p, &y1, &y2, &r1, &r2, &c, &s));
        assert!(!verify(
            g,
            h,
            p,
            &y1,
            &y2,
            &r1,
            &r2,
            &c,
            &(s + BigUint::one()).modpow(&BigUint::one(), &q)
        ));
    }
}
